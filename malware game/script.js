const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const scoreDisplay = document.getElementById("score");
const startScreen = document.getElementById("startScreen");
const gameOverScreen = document.getElementById("gameOver");
const finalScoreDisplay = document.getElementById("finalScore");
const startButton = document.getElementById("startButton");
const restartButton = document.getElementById("restartButton");

// Game variables
const player = {
    x: 180,
    y: 450,
    width: 40,
    height: 40,
    speed: 5
};

let malware = [];
let bullets = [];
let gameOver = false;
let score = 0;
let gameStarted = false;

// Draw player (Font Awesome icon)
function drawPlayer() {
    ctx.font = "30px FontAwesome";
    ctx.fillStyle = "#00ff00"; // Green color for player
    ctx.fillText("\uf21e", player.x, player.y + player.height); // Shield icon ()
}

// Create malware
function createMalware() {
    malware.push({
        x: Math.random() * (canvas.width - 40),
        y: 0,
        width: 40,
        height: 40,
        speed: 2 + Math.random() * 3 + score * 0.1 // Increase speed with score
    });
}

// Draw malware (Font Awesome icon)
function drawMalware() {
    ctx.font = "30px FontAwesome";
    ctx.fillStyle = "#ff0000"; // Red color for malware
    malware.forEach((m, index) => {
        ctx.fillText("\uf1e2", m.x, m.y + m.height); // Bug icon ()
        m.y += m.speed;

        // Remove malware if it goes off-screen
        if (m.y > canvas.height) {
            malware.splice(index, 1);
        }
    });
}

// Shoot bullets
function shoot() {
    bullets.push({
        x: player.x + player.width / 2 - 5,
        y: player.y,
        width: 10,
        height: 20,
        speed: 7
    });
}

// Draw bullets
function drawBullets() {
    ctx.fillStyle = "#ffcc00";
    bullets.forEach((b, index) => {
        ctx.fillRect(b.x, b.y, b.width, b.height);
        b.y -= b.speed;

        // Remove bullets if they go off-screen
        if (b.y + b.height < 0) {
            bullets.splice(index, 1);
        }
    });
}

// Check collisions (Player vs Malware, Bullet vs Malware)
function checkCollision() {
    malware.forEach((m, mi) => {
        bullets.forEach((b, bi) => {
            if (
                b.x < m.x + m.width &&
                b.x + b.width > m.x &&
                b.y < m.y + m.height &&
                b.y + b.height > m.y
            ) {
                malware.splice(mi, 1); // Remove malware
                bullets.splice(bi, 1); // Remove bullet
                score += 10; // Increase score
                scoreDisplay.textContent = `Score: ${score}`; // Update score display
            }
        });

        if (
            m.x < player.x + player.width &&
            m.x + m.width > player.x &&
            m.y < player.y + player.height &&
            m.y + m.height > player.y
        ) {
            gameOver = true;
            gameOverScreen.style.display = "block";
            finalScoreDisplay.textContent = score;
        }
    });
}

// Reset game
function resetGame() {
    player.x = 180;
    player.y = 450;
    malware = [];
    bullets = [];
    score = 0;
    gameOver = false;
    gameStarted = true;
    gameOverScreen.style.display = "none";
    scoreDisplay.textContent = `Score: ${score}`;
}

// Update game frame
function update() {
    if (!gameStarted) return;

    if (gameOver) return;

    ctx.clearRect(0, 0, canvas.width, canvas.height);
    drawPlayer();
    drawMalware();
    drawBullets();
    checkCollision();
}

// Spawn malware every second
setInterval(() => {
    if (gameStarted && !gameOver) createMalware();
}, 1000);

// Player controls
document.addEventListener("keydown", event => {
    if (!gameStarted) return;

    if (gameOver) return;

    if (event.key === "ArrowLeft" && player.x > 0) {
        player.x -= player.speed;
    } else if (event.key === "ArrowRight" && player.x < canvas.width - player.width) {
        player.x += player.speed;
    } else if (event.key === " ") {
        shoot();
    }
});

// Start game
startButton.addEventListener("click", () => {
    startScreen.style.display = "none";
    gameStarted = true;
});

// Restart game
restartButton.addEventListener("click", () => {
    resetGame();
});

// Game loop
function gameLoop() {
    update();
    requestAnimationFrame(gameLoop);
}

gameLoop();